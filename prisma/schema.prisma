// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  // OpenIDTokenEndpointResponse properties
  access_token             String? @db.Text
  expires_in               Int?
  id_token                 String? @db.Text
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  scope                    String?
  token_type               String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  accounts Account[]
  sessions Session[]
  posts    Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([identifier, token])
}

model Post {
  id      String @id @default(cuid())
  user_id String
  // URL slug
  slug    String @unique @default(cuid())
  title   String @db.Text
  text    String @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  User       User?    @relation(fields: [user_id], references: [id])

  @@index([user_id])
}
